{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","webpackCompilationHash":"58ef62da69ca5a4dfe54","result":{"data":{"deck":{"id":"e3f24f69-89bd-52f7-ad7a-cd36f516811a","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* @jsx mdx */\nvar theme = vsDark;\n\nvar SimpleComponent = function SimpleComponent() {\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      counter = _React$useState2[0],\n      setCounter = _React$useState2[1];\n\n  return mdx(\"div\", null, \"The counter is \", counter, \" \", mdx(\"br\", null), mdx(\"button\", {\n    onClick: function onClick() {\n      return setCounter(counter + 1);\n    }\n  }, \"Increment counter\"));\n};\n\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  SimpleComponent: SimpleComponent,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Modern Day React (with Hooks)\"), mdx(\"p\", null, \"Modern day React development with Hooks\"), mdx(\"hr\", null), mdx(\"p\", null, \"The Hello World of hooks\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const App: React.FunctionComponent = () => {\\n  const [counter, setCounter] = React.useState(0);\\n  return (\\n    <div>\\n      The counter is {counter}\\n      <button onClick={() => setCounter(counter + 1)}>\\n        Increment counter\\n      </button>\\n    </div>\\n  );\\n};\\n\"))), mdx(\"hr\", null), mdx(SimpleComponent, {\n    mdxType: \"SimpleComponent\"\n  }), mdx(\"hr\", null), mdx(\"p\", null, \"A bit more involved\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const App: React.FunctionComponent = () => {\\n  const [counter, setCounter] = React.useState(0);\\n  const [log, setLog] = React.useState([]);\\n  React.useEffect(() => {\\n    setInterval(() => {\\n      setLog(log.concat(`snapshot with ${counter}`))\\n    }, 1000)\\n  }, []);\\n\\n  return (\\n    <div>\\n      <pre>{log.join('\\\\n')}</pre>\\n      <div>The counter is {counter}</div>\\n      <button onClick={() => setCounter(counter + 1)}>\\n        Increment counter\\n      </button>\\n    </div>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"https://stackblitz.com/edit/react-ts-nyteej\\\"\",\n    \"subtitle\": \"\\\"https://stackblitz.com/edit/react-ts-nyteej\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const App: React.FunctionComponent = () => {\\n  const [counter, setCounter] = React.useState(0);\\n  const [log, setLog] = React.useState([]);\\n  React.useEffect(() => {\\n    const interval = setInterval(() => {\\n      setLog(log.concat(`snapshot with ${counter}`))\\n    }, 1000)\\n    return () => clearInterval(interval);\\n  }, [counter, log]);\\n\\n  return (\\n    <div>\\n      <pre>{log.join('\\\\n')}</pre>\\n      <div>The counter is {counter}</div>\\n      <button onClick={() => setCounter(counter + 1)}>\\n        Increment counter\\n      </button>\\n    </div>\\n  );\\n};\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"App.tsx\\\" subtitle=\\\"A simple component\\\"\",\n    \"title\": \"\\\"App.tsx\\\"\",\n    \"subtitle\": \"\\\"A\",\n    \"simple\": true,\n    \"component\\\"\": true\n  }), \"const App: React.FunctionComponent = () => {\\n  return (\\n    <div className=\\\"app\\\">\\n      Hello World!\\n    </div>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"App.tsx\\\" subtitle=\\\"Render some dumb components\\\"\",\n    \"title\": \"\\\"App.tsx\\\"\",\n    \"subtitle\": \"\\\"Render\",\n    \"some\": true,\n    \"dumb\": true,\n    \"components\\\"\": true\n  }), \"const App: React.FunctionComponent = () => {\\n  return (\\n    <div className=\\\"app\\\">\\n      <Sidebar />\\n      <Header />\\n      <App />\\n      <Footer />\\n    </div>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"Now we need to load a user\\\"\",\n    \"subtitle\": \"\\\"Now\",\n    \"we\": true,\n    \"need\": true,\n    \"to\": true,\n    \"load\": true,\n    \"a\": true,\n    \"user\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"App.tsx\\\"\",\n    \"title\": \"\\\"App.tsx\\\"\"\n  }), \"class App extends Component {\\n  state = { isLoading: true };\\n  async componentDidMount() {\\n    const user = await fetchUser();\\n    this.setState({ user, isLoading: false });\\n  }\\n  render() {\\n    const { user, isLoading } = this.state;\\n    if (isLoading) return <Loading />\\n    return (\\n      <div className=\\\"app\\\">\\n        <Sidebar />\\n        <Header user={user} />\\n        <App />\\n        <Footer />\\n      </div>\\n    );\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"App.tsx\\\"\",\n    \"title\": \"\\\"App.tsx\\\"\"\n  }), \"class App extends Component {\\n  state = { isLoading: true };\\n  async componentDidMount() {\\n    try {\\n      const user = await fetchUser();\\n      this.setState({ user, isLoading: false });\\n    } catch (error) {\\n      this.setState({ error, isLoading: false });\\n    }\\n  }\\n  render() {\\n    const { user, isLoading, error } = this.state;\\n    if (isLoading) return <Loading />\\n    if (error) return <Error error={error} />\\n    return (\\n      <div className=\\\"app\\\">\\n        <Sidebar />\\n        <Header user={user} />\\n        <App />\\n        <Footer />\\n      </div>\\n    );\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"We may also need to also load the permissions for the sidebar and header\\\"\",\n    \"subtitle\": \"\\\"We\",\n    \"may\": true,\n    \"also\": true,\n    \"need\": true,\n    \"to\": true,\n    \"load\": true,\n    \"the\": true,\n    \"permissions\": true,\n    \"for\": true,\n    \"sidebar\": true,\n    \"and\": true,\n    \"header\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"ðŸ˜¢\\\"\",\n    \"subtitle\": \"\\\"ðŸ˜¢\\\"\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"App.tsx\\\" subtitle=\\\"Let's try that with hooks\\\"\",\n    \"title\": \"\\\"App.tsx\\\"\",\n    \"subtitle\": \"\\\"Let's\",\n    \"try\": true,\n    \"that\": true,\n    \"with\": true,\n    \"hooks\\\"\": true\n  }), \"const App: React.FunctionComponent = () => {\\n  return (\\n    <div className=\\\"app\\\">\\n      <Sidebar />\\n      <Header />\\n      <App />\\n      <Footer />\\n    </div>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"App.tsx\\\"\",\n    \"title\": \"\\\"App.tsx\\\"\"\n  }), \"const App: React.FunctionComponent = () => {\\n  const { user } = useUser();\\n  return (\\n    <div className=\\\"app\\\">\\n      <Sidebar />\\n      <Header user={user} />\\n      <App />\\n      <Footer />\\n    </div>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"App.tsx\\\"\",\n    \"title\": \"\\\"App.tsx\\\"\"\n  }), \"const App: React.FunctionComponent = () => {\\n  const { user, isLoading, error } = useUser();\\n  if (isLoading) return <Loading />;\\n  if (error) return <Error error={error} />\\n  return (\\n    <div className=\\\"app\\\">\\n      <Sidebar />\\n      <Header user={user} />\\n      <App />\\n      <Footer />\\n    </div>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"What is a hook\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { fetchUser } from './user-service';\\nconst useUser = () => {\\n  const [user, setUser] = React.useState<User | null>(null);\\n  React.useEffect(() => {\\n    fetchUser()\\n      .then(user => setUser(user))\\n    ;\\n  }, []);\\n  return {\\n    user,\\n  };\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"We need async state\\\"\",\n    \"subtitle\": \"\\\"We\",\n    \"need\": true,\n    \"async\": true,\n    \"state\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { fetchUser } from './user-service';\\nconst useUser = () => {\\n  const [user, setUser] = React.useState<User | null>(null);\\n  const [isLoading, setIsLoading] = React.useState(false);\\n  const [error, setError] = React.useState<Error | undefined>(undefined);\\n  React.useEffect(() => {\\n    fetchUser()\\n      .then(user => setUser(user))\\n      .catch(error => setError(error))\\n      .finally(() => setIsLoading(false))\\n    ;\\n  }, []);\\n  return {\\n    user,\\n    isLoading,\\n    error,\\n  };\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { useAsync } from 'react-use';\\nimport { fetchUser } from './user-service';\\nconst useUser = () => {\\n  const { value, loading, error } = useAsync(fetchUser);\\n\\n  return {\\n    user: value,\\n    isLoading,\\n    error,\\n  };\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"subtitle=\\\"https://codesandbox.io/s/bold-bash-cvugk?file=/src/index.tsx\\\"\",\n    \"subtitle\": \"\\\"https://codesandbox.io/s/bold-bash-cvugk?file\"\n  }), \"\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Aspects of Well Written Hooks\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clean API surface\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Few (None) inputs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Does one thing well\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Composes other hooks as building blocks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Doesn't leak implementation details\")), mdx(\"p\", null, \"If something looks like a common pattern/problem\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"someone probably already wrote a hook for it\"), mdx(\"p\", null, \"\\\"There's a\", mdx(\"s\", {\n    style: {\n      \"color\": \"red\"\n    }\n  }, \"n app\"), \" \", mdx(\"span\", {\n    style: {\n      \"fontStyle\": \"italic\"\n    }\n  }, \"Hook\"), \" for that!\\\"\"), mdx(\"hr\", null), mdx(\"p\", null, \"Patterns to avoid\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Many permutations of calling/being called\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Managing too much state manually\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"More than one callback function\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Two way hook communication/cycles (not a DAG)\")), mdx(\"hr\", null), mdx(\"p\", null, \"React Hooks Ecosystem\"), mdx(\"div\", {\n    style: {\n      fontSize: 20,\n      padding: '0 120px'\n    }\n  }, ['@koale/useworker, @marvelsq/use-properties-hook, @rekindle/use-request, @staltz/use-profunctor-state, @wellyshen/use-web-animations', 'ahooks/usetable, use-abortable-fetch, use-action, use-as-bind, use-async-memo, use-autocomplete, use-axios-react, use-boolean, use-browser-history', 'use-cart, use-click-away, use-clippy, use-context-selector, use-controlled-input-number, use-countries, use-debounce, use-deep-compare', 'use-deep-compare-effect, use-detect-print, use-dimensions, use-double-click, use-eazy-auth, use-events, use-force-update, use-hotkeys', 'use-hovering, use-http, use-immer, use-input-file, use-is-mounted-ref, use-lang-direction, use-last-fm, use-lilius, use-media, use-mouse-action', 'use-multiselect, use-overflow, use-places-autocomplete, use-popper, use-query-params, use-react-modal, use-react-router, use-reactive-state', 'use-reducer-async, use-redux, use-scroll-to-bottom, use-scroller, use-simple-undo, use-socket.io-client, use-sse, use-ssr, use-state-snapshots', 'use-substate, use-suspender, use-t, use-undo, use-videocard, use-window-blur-change-title, useAsync, useAsyncFn, useAsyncRetry, useAudio', 'useBattery, useBeforeUnload, useBoolean, useClickAway, useContextReducer, useContextState, useCookie, useCopyToClipboard, useCounter, useCss', 'useCustomCompareEffect, useDarkMode, useDebounce, useDeepCompareEffect, useDefault, useDeferredState, useDrop, useDropArea, useDropZone', 'useEffectOnce, useEmailAutocomplete, useEnsuredForwardedRef, useError, useEvent, useFavicon, useFileDialog, useFirstMountState, useFullscreen', 'useGeolocation, useGetSet, useGetSetState, useHarmonicIntervalFn, useHash, useHover, useHoverDirty, useIdle, useIntersection, useInterval, useIsMountedRef', 'useIsTyping, useIsomorphicLayoutEffect, useKey, useKeyCapture, useKeyPress, useKeyPressEvent, useKeyboardJs, useLatest, useLayoutEffect, useLifecycles', 'useList, useLocalStorage, useLocation, useLockBodyScroll, useLogger, useLongPress, useMap, useMeasure, useMedia, useMediaDevices, useMediatedState, useMethods', 'useMotion, useMount, useMountedState, useMouse, useMouseHovered, useMouseWheel, useMultiStateValidator, useNetworkState, useNumber, useObservable, useOrientation', 'usePageLeave, usePermission, usePosition, usePrevious, usePreviousDistinct, usePromise, useProps, useQueue, useRaf, useRafLoop, useRafState, useReactiveState', 'useReducer, useReducerWithEffects, useReducerWithLocalStorage, useRendersCount, useScratch, useScreenType, useScroll, useScrollSpy, useScrollbarWidth, useScrolling', 'useSearchParam, useServiceWorker, useSessionStorage, useSet, useSetState, useShallowCompareEffect, useSize, useSlider, useSpeech, useSpring, useStartTyping, useStateList', 'useStateValidator, useStateWithHistory, useThrottle, useThrottleFn, useTimeout, useTimeoutFn, useTitle, useToggle, useTween, useUnmount, useUnmountPromise, useUpdate', 'useUpdateEffect, useUpsert, useValueAfter, useVibrate, useVideo, useWaitForElements, useWindowOrientation, useWindowScroll, useWindowSize, useWindowWidthBreakpoints', 'react-use-api, react-use-browser, react-use-calendar, react-use-clipboard, react-use-d3, react-use-data-loader, react-use-fetch-factory, react-use-fetch-with-redux, react-use-form-state, react-use-id-hook, react-use-idb, react-use-infinite-loader, react-use-input, react-use-lazy-load-image, react-use-message-bar, react-use-modal, react-use-path, react-use-scroll-position, react-use-trigger, react-use-watch, react-use-wavelet, react-useFormless, react-usemiddleware, react-useportal, react-user-media'].map(function (l, i) {\n    return mdx(\"marquee\", null, l);\n  })), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { fetchUser } from './user-service';\\nconst useUser = () => {\\n  const [user, setUser] = React.useState<User | null>(null);\\n  const [isLoading, setIsLoading] = React.useState(false);\\n  const [error, setError] = React.useState<Error | undefined>(undefined);\\n  React.useEffect(() => {\\n    fetchUser()\\n      .then(user => setUser(user))\\n      .catch(error => setError(error))\\n      .finally(() => setIsLoading(false))\\n    ;\\n  }, []);\\n  return {\\n    user,\\n    isLoading,\\n    error,\\n  };\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { useAsync } from 'react-use';\\nimport { fetchUser } from './user-service';\\nconst useUser = () => {\\n  const { value, loading, error } = useAsync(fetchUser);\\n\\n  return {\\n    user: value,\\n    isLoading,\\n    error,\\n  };\\n}\\n\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Bonus Round - Testing\"), mdx(\"hr\", null), mdx(\"p\", null, \"You can't \\\"exactly\\\" unit test Function Components.\"), mdx(\"a\", {\n    target: \"_blank\",\n    href: \"https://testingjavascript.com/\"\n  }, \"testingjavascript.com\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const GreetingBar: React.FunctionComponent = () => {\\n  const intl = useIntl();\\n  const formattedMessage = intl.formatMessage({\\n    id: 'greetingbar.greeting',\\n  }, {\\n    name: 'Moshe',\\n  });\\n  return <h2>{formattedMessage}</h2>\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"describe('GreetingBar', () => {\\n  function setup() {\\n    const { getByText } = render(<GreetingBar />)\\n    return { getByText };\\n  }\\n\\n  it('shows the greeting message', () => {\\n    const { getByText } = setup();\\n    expect(getByText('Hello Moshe')).toBeInTheDocument();\\n  });\\n});\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import * as userService from './user-service';\\n\\nconst mockFetchUser = jest.spyOn(userService, 'fetchUser')\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import * as userService from './user-service';\\n\\nconst mockFetchUser = jest.spyOn(userService, 'fetchUser')\\n\\nconst setupComponentWithFetcher = (fetcher: any) => {\\n  mockFetchUser.mockReturnValue(fetcher);\\n  const Component: React.FC = () => {\\n    const {user, loading, error} = useUser();\\n    if (loading) return <div>Loading</div>\\n    if (error) return <div>Error</div>\\n    return <div>{user.name}</div>\\n  }\\n  render(<Component />)\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import * as userService from './user-service';\\n\\nconst mockFetchUser = jest.spyOn(userService, 'fetchUser')\\n\\nconst setupComponentWithFetcher = (fetcher: any) => {\\n  mockFetchUser.mockReturnValue(fetcher);\\n  const Component: React.FC = () => {\\n    const {user, loading, error} = useUser();\\n    if (loading) return <div>Loading</div>\\n    if (error) return <div>Error</div>\\n    return <div>{user.name}</div>\\n  }\\n  render(<Component />)\\n}\\n\\ntest(\\\"loading state\\\", () => {\\n  setupComponentWithFetcher(new Promise(r => {})); // Hanging promise\\n  expect(screen.getByText('Loading')).toBeInTheDocument();\\n});\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import * as userService from './user-service';\\n\\nconst mockFetchUser = jest.spyOn(userService, 'fetchUser')\\n\\nconst setupComponentWithFetcher = (fetcher: any) => {\\n  mockFetchUser.mockReturnValue(fetcher);\\n  const Component: React.FC = () => {\\n    const {user, loading, error} = useUser();\\n    if (loading) return <div>Loading</div>\\n    if (error) return <div>Error</div>\\n    return <div>{user.name}</div>\\n  }\\n  render(<Component />)\\n}\\n\\ntest(\\\"loading state\\\", () => {\\n  setupComponentWithFetcher(new Promise(r => {})); // Hanging promise\\n  expect(screen.getByText('Loading')).toBeInTheDocument();\\n});\\n\\ntest(\\\"error state\\\", () => {\\n  setupComponentWithFetcher(Promise.reject(new Error()));\\n  expect(screen.getByText('Error')).toBeInTheDocument();\\n});\\n\\ntest(\\\"loaded state\\\", () => {\\n  setupComponentWithFetcher(Promise.resolve({name: 'Moshe'}));\\n  expect(screen.getByText('Moshe')).toBeInTheDocument();\\n});\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Fin\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"e3f24f69-89bd-52f7-ad7a-cd36f516811a","slug":"/talks/hooks","title":"Modern Day React (with Hooks)"}}}